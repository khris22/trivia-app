{"version":3,"sources":["images/zach-lucero.jpg","API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNum","totalQuestions","className","dangerouslySetInnerHTML","__html","ans","key","correctAnswer","answer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setloading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQ","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.920047bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/zach-lucero.cab9194d.jpg\";","import { shuffleArray } from './utils';\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport enum Difficulty {\n  EASY = 'easy',\n  MEDIUM = 'medium',\n  HARD = 'hard',\n}\n\nexport type QuestionState = Question & { answer: string[] };\n\nexport const fetchQuizQuestions = async (\n  amount: number,\n  difficulty: Difficulty,\n) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n};\n","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);\n\n// any[] - any type\n//  shuffle the array of choices from the fetch request\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n  :hover {\n    opacity: 0.8;\n  }\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\n        : !correct && userClicked\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n    border: 3px solid #ffffff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n`;\n","import React from 'react';\nimport { AnswerObject } from '../App';\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\ntype Props = {\n  question: string;\n  answer: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNum: number;\n  totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNum,\n  totalQuestions,\n}) => {\n  return (\n    <Wrapper>\n      <p className='number'>\n        Question: {questionNum} / {totalQuestions}\n      </p>\n      <p dangerouslySetInnerHTML={{ __html: question }}></p>\n      <div>\n        {answers.map((ans) => (\n          <ButtonWrapper\n            key={ans}\n            correct={userAnswer?.correctAnswer === ans}\n            userClicked={userAnswer?.answer === ans}>\n            {/* button needs to be a boolean */}\n            {/* userAnswer ? true : false */}\n            <button disabled={!!userAnswer} value={ans} onClick={callback}>\n              <span dangerouslySetInnerHTML={{ __html: ans }}></span>\n            </button>\n          </ButtonWrapper>\n        ))}\n      </div>\n    </Wrapper>\n  );\n};\n\nexport default QuestionCard;\n\n// NOTES:\n// dangerouslySetInnerHTML is React’s replacement for using innerHTML in the browser DOM. In general, setting HTML from code is risky because it’s easy to inadvertently expose your users to a cross-site scripting (XSS) attack.\n","import styled, { createGlobalStyle } from 'styled-components';\nimport BGImage from './images/zach-lucero.jpg';\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%;\n    }\n\n    body {\n        background-image: url(${BGImage});\n        background-position:center;\n        background-size: cover;\n        margin: 0;\n        padding: 0 20px;\n        display: flex;\n        justify-content: center;\n    }\n\n    * {\n        font-family: 'Poppins', san-serif;\n        box-sizing: border-box;\n    }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  > p {\n    color: #fff;\n  }\n\n  .score {\n    color: #fff;\n    font-size: 2rem;\n    margin: 0;\n  }\n\n  h1 {\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    font-weight: 400;\n    background-size: 100%;\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n    filter: drop-shadow(2px 2px #0085a3);\n    font-size: 90px;\n    text-align: center;\n    margin: 20px;\n  }\n  .start,\n  .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n  .start {\n    max-width: 200px;\n  }\n`;\n","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\nimport QuestionCard from './components/QuestionCard';\nimport { Difficulty, QuestionState } from './API';\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nfunction App() {\n  const TOTAL_QUESTIONS = 10;\n\n  const [loading, setloading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setloading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY,\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setloading(false);\n  };\n\n  // error handling\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // user clicks the answer\n      const answer = e.currentTarget.value;\n      // check the userAnswer and the answer on API\n      const correct = questions[number].correct_answer === answer;\n      // add score if answer is correct\n      if (correct) setScore((prev) => prev + 1);\n      // save answer in the local state of array for userAnswer\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // check if it's not the last question\n    const nextQ = number + 1;\n\n    if (nextQ === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQ);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>TRIVIA QUIZ</h1>\n\n        {/* Start button  is only displayed if the game is over ||or if the user has answered the last question*/}\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className='start' onClick={startTrivia}>\n            START\n          </button>\n        ) : null}\n\n        {/* Show score only when tha game is not over */}\n        {!gameOver ? <p className='score'>Score: {score}</p> : null}\n\n        {/* Show loading if the questions are still loading */}\n        {/* {loading ? <p>Loading Questions...</p> : null} */}\n        {loading && <p>Loading Questions...</p>}\n\n        {/* Question card will only be shown IF we're not loading or we're not gameOver */}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNum={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n\n        {/* Shown when NOT gameOver && NOT Loading  */}\n        {!gameOver &&\n        !loading &&\n        userAnswers.length === number + 1 &&\n        number !== TOTAL_QUESTIONS - 1 ? (\n          <button className='next' onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}